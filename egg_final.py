import requests
import json
import time
from datetime import datetime, timedelta
from collections import defaultdict
import pytz
import os
import sys
import tkinter as tk
from tkinter import ttk, messagebox
import threading
import webbrowser
import pyperclip  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—É—Ñ–µ—Ä–æ–º –æ–±–º–µ–Ω–∞

# –°–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Å–æ–ª—å –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–µ—Ä–µ–∑ —è—Ä–ª—ã–∫
if sys.executable.endswith("pythonw.exe"):
    sys.stdout = open(os.devnull, 'w')
    sys.stderr = open(os.devnull, 'w')

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
INVENTORY_API = "https://egg-surprise.shop/api/inventory/get"
ITEMS_API = "https://egg-surprise.shop/api/get-all-items"
CONFIG_FILE = "config.json"
CHECK_INTERVAL = 600  # 10 –º–∏–Ω—É—Ç
HISTORY_FILE = "inventory_history.json"
TIMEZONE = pytz.timezone('Europe/Moscow')

class AuthWindow:
    def __init__(self, root, on_auth_success):
        self.root = root
        self.on_auth_success = on_auth_success
        self.setup_ui()
        
    def setup_ui(self):
        self.root.title("Egg Surprise - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        self.root.geometry("500x250")
        self.root.resizable(False, False)
        
        main_frame = ttk.Frame(self.root, padding=20)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        ttk.Label(main_frame, text="–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", font=('Arial', 12)).pack(pady=10)
        
        # –§—Ä–µ–π–º –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∏ –≤—Å—Ç–∞–≤–∫–∏
        entry_frame = ttk.Frame(main_frame)
        entry_frame.pack(pady=5)
        
        self.token_entry = ttk.Entry(entry_frame, width=50)
        self.token_entry.pack(side=tk.LEFT, padx=5)
        self.token_entry.focus()
        
        paste_btn = ttk.Button(entry_frame, text="–í—Å—Ç–∞–≤–∏—Ç—å", command=self.paste_from_clipboard, width=8)
        paste_btn.pack(side=tk.LEFT)
        
        btn_frame = ttk.Frame(main_frame)
        btn_frame.pack(pady=10)
        
        ttk.Button(btn_frame, text="–í–æ–π—Ç–∏", command=self.authenticate).pack(side=tk.LEFT, padx=5)
        ttk.Button(btn_frame, text="–í—ã–π—Ç–∏", command=self.root.quit).pack(side=tk.LEFT, padx=5)
        
        self.status_label = ttk.Label(main_frame, text="", foreground="red")
        self.status_label.pack()
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Enter –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.root.bind('<Return>', lambda e: self.authenticate())
    
    def paste_from_clipboard(self):
        try:
            clipboard_content = pyperclip.paste()
            if clipboard_content:
                self.token_entry.delete(0, tk.END)
                self.token_entry.insert(0, clipboard_content)
        except Exception as e:
            self.status_label.config(text=f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±—É—Ñ–µ—Ä—É –æ–±–º–µ–Ω–∞: {str(e)}")
    
    def authenticate(self):
        token = self.token_entry.get().strip()
        if not token:
            self.status_label.config(text="–¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
            
        self.status_label.config(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞...")
        self.root.update()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        if self.check_token(token):
            self.save_token(token)
            self.on_auth_success(token)
            self.root.destroy()
        else:
            self.status_label.config(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    def check_token(self, token):
        headers = {
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json'
        }
        try:
            response = requests.get(INVENTORY_API, headers=headers, timeout=10)
            return response.status_code == 200
        except Exception:
            return False
    
    def save_token(self, token):
        try:
            with open(CONFIG_FILE, 'w') as f:
                json.dump({"token": token}, f)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")

class InventoryTracker:
    def __init__(self, root, token):
        self.root = root
        self.token = token
        self.history = {}
        self.current_inventory = None
        self.items_info = {}
        self.tracking_active = False
        self.tracking_thread = None
        self.show_changed_only = False
        self.sort_column = "current"
        self.sort_reverse = False
        self.search_query = tk.StringVar()
        self.selected_date = tk.StringVar(value=self.get_current_date_key())
        
        self.setup_ui()  # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.load_history()
        self.load_items_info()
        
        if not self.history:
            self.status("–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–≥—Ä—É–∂–∞—é —Ç–µ–∫—É—â–∏–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å...")
            self.initialize_first_run()
        else:
            self.update_inventory_display()

    def get_current_date_key(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD"""
        return datetime.now(TIMEZONE).strftime("%Y-%m-%d")

    def setup_ui(self):
        self.root.title("Egg Surprise - –¢—Ä–µ–∫–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
        self.root.geometry("1200x700")
        self.root.configure(bg='#f0f0f0')
        self.root.protocol("WM_DELETE_WINDOW", self.on_close)

        # –°—Ç–∏–ª–∏
        style = ttk.Style()
        style.theme_use('clam')
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏
        style.configure('.', background='#f0f0f0', foreground='#333333', font=('Segoe UI', 10))
        style.configure('TButton', background='#4a6fa5', foreground='white', borderwidth=1,
                       relief='solid', font=('Segoe UI', 10, 'bold'), padding=8)
        style.map('TButton', background=[('active', '#3a5a8f'), ('disabled', '#cccccc')],
                foreground=[('disabled', '#888888')])
        style.configure('Active.TButton', background='#2c4d7f', foreground='white',
                      borderwidth=1, relief='solid', font=('Segoe UI', 10, 'bold'))
        style.configure('TFrame', background='#f0f0f0')
        style.configure('Header.TFrame', background='#2c4d7f')
        style.configure('Header.TLabel', background='#2c4d7f', foreground='white',
                       font=('Segoe UI', 12, 'bold'))
        style.configure('Treeview', background='white', foreground='#333333',
                      fieldbackground='white', borderwidth=1, font=('Segoe UI', 10),
                      rowheight=30)
        style.map('Treeview', background=[('selected', '#4a6fa5')], foreground=[('selected', 'white')])
        style.configure('Treeview.Heading', background='#2c4d7f', foreground='white',
                      font=('Segoe UI', 10, 'bold'), borderwidth=1, padding=5)

        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        # –®–∞–ø–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        header_frame = ttk.Frame(main_frame, style='Header.TFrame')
        header_frame.pack(fill=tk.X, pady=(0, 10), ipady=10)

        # –õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        title_frame = ttk.Frame(header_frame, style='Header.TFrame')
        title_frame.pack(side=tk.LEFT, padx=10)
        ttk.Label(title_frame, text="Egg Surprise", style='Header.TLabel', 
                font=('Segoe UI', 14, 'bold')).pack(side=tk.LEFT)
        ttk.Label(title_frame, text="–¢—Ä–µ–∫–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è", style='Header.TLabel').pack(side=tk.LEFT, padx=(5,0))

        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        tool_frame = ttk.Frame(header_frame, style='Header.TFrame')
        tool_frame.pack(side=tk.RIGHT, padx=10)

        # –ö–Ω–æ–ø–∫–∏
        self.refresh_btn = ttk.Button(tool_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                                    command=self.refresh_data, style='TButton')
        self.refresh_btn.pack(side=tk.LEFT, padx=5)
        
        self.track_btn = ttk.Button(tool_frame, text="üîç –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ", 
                                  command=self.toggle_tracking, style='TButton')
        self.track_btn.pack(side=tk.LEFT, padx=5)
        
        export_btn = ttk.Button(tool_frame, text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", 
                              command=self.export_data, style='TButton')
        export_btn.pack(side=tk.LEFT, padx=5)
        
        self.filter_btn = ttk.Button(tool_frame, text="üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ", 
                              command=self.toggle_filter, style='TButton')
        self.filter_btn.pack(side=tk.LEFT, padx=5)
        
        logout_btn = ttk.Button(tool_frame, text="üîÑ –°–º–µ–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", 
                              command=self.logout, style='TButton')
        logout_btn.pack(side=tk.LEFT, padx=5)

        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = ttk.Frame(main_frame)
        control_frame.pack(fill=tk.X, pady=5)

        # –í—ã–±–æ—Ä –¥–∞—Ç—ã
        date_frame = ttk.Frame(control_frame)
        date_frame.pack(side=tk.LEFT, padx=10)
        ttk.Label(date_frame, text="üìÖ –î–∞—Ç–∞:").pack(side=tk.LEFT)
        
        prev_day_btn = ttk.Button(date_frame, text="‚óÄ", command=self.prev_day, width=3)
        prev_day_btn.pack(side=tk.LEFT, padx=2)
        
        self.date_combo = ttk.Combobox(date_frame, textvariable=self.selected_date, state="readonly")
        self.date_combo.pack(side=tk.LEFT, padx=2)
        self.update_date_combobox()
        self.date_combo.bind("<<ComboboxSelected>>", self.on_date_selected)
        
        next_day_btn = ttk.Button(date_frame, text="‚ñ∂", command=self.next_day, width=3)
        next_day_btn.pack(side=tk.LEFT, padx=2)

        # –ü–æ–∏—Å–∫
        search_frame = ttk.Frame(control_frame)
        search_frame.pack(side=tk.LEFT, padx=10)
        ttk.Label(search_frame, text="üîç –ü–æ–∏—Å–∫:").pack(side=tk.LEFT)
        self.search_entry = ttk.Entry(search_frame, textvariable=self.search_query, width=30)
        self.search_entry.pack(side=tk.LEFT, padx=5)
        self.search_entry.bind("<KeyRelease>", lambda e: self.update_inventory_display())

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        sort_frame = ttk.Frame(control_frame)
        sort_frame.pack(side=tk.RIGHT, padx=5)
        ttk.Label(sort_frame, text="–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:").pack(side=tk.LEFT)
        self.sort_combo = ttk.Combobox(sort_frame, 
                                     values=["–ù–∞–∑–≤–∞–Ω–∏–µ", "ID", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ"], 
                                     state="readonly")
        self.sort_combo.pack(side=tk.LEFT, padx=5)
        self.sort_combo.set("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        self.sort_combo.bind("<<ComboboxSelected>>", self.change_sort)

        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        self.tree_frame = ttk.Frame(main_frame)
        self.tree_frame.pack(fill=tk.BOTH, expand=True)
        
        self.tree = ttk.Treeview(self.tree_frame, 
                               columns=("id", "name_ru", "name_en", "initial", "current", "change"), 
                               show="headings")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        self.tree.heading("id", text="ID", command=lambda: self.sort_by_column("id"))
        self.tree.column("id", width=80, anchor=tk.CENTER)
        
        self.tree.heading("name_ru", text="–ù–∞–∑–≤–∞–Ω–∏–µ (RU)", command=lambda: self.sort_by_column("name_ru"))
        self.tree.column("name_ru", width=250, anchor=tk.W)
        
        self.tree.heading("name_en", text="–ù–∞–∑–≤–∞–Ω–∏–µ (EN)", command=lambda: self.sort_by_column("name_en"))
        self.tree.column("name_en", width=250, anchor=tk.W)
        
        self.tree.heading("initial", text="–ù–∞—á–∞–ª–æ –¥–Ω—è", command=lambda: self.sort_by_column("initial"))
        self.tree.column("initial", width=100, anchor=tk.CENTER)
        
        self.tree.heading("current", text="–¢–µ–∫—É—â–µ–µ", command=lambda: self.sort_by_column("current"))
        self.tree.column("current", width=100, anchor=tk.CENTER)
        
        self.tree.heading("change", text="–ò–∑–º–µ–Ω–µ–Ω–∏–µ", command=lambda: self.sort_by_column("change"))
        self.tree.column("change", width=100, anchor=tk.CENTER)
        
        # –¶–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫
        self.tree.tag_configure('evenrow', background='#f8f8f8')
        self.tree.tag_configure('oddrow', background='#ffffff')
        self.tree.tag_configure('positive', foreground='green')
        self.tree.tag_configure('negative', foreground='red')
        
        # –ü–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        scrollbar = ttk.Scrollbar(self.tree_frame, orient=tk.VERTICAL, command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar()
        status_bar = ttk.Frame(main_frame)
        status_bar.pack(fill=tk.X, pady=(5,0))
        ttk.Label(status_bar, textvariable=self.status_var, 
                 background='#2c4d7f', foreground='white',
                 anchor=tk.W, padding=5).pack(fill=tk.X)

    def on_close(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.stop_tracking()
        self.root.destroy()

    def logout(self):
        """–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        self.stop_tracking()
        if os.path.exists(CONFIG_FILE):
            try:
                os.remove(CONFIG_FILE)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        self.root.destroy()
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        main()

    def update_date_combobox(self):
        dates = sorted(self.history.keys(), reverse=True)
        if dates:
            self.date_combo['values'] = dates
            if not self.selected_date.get() in dates:
                self.selected_date.set(dates[0])
        else:
            self.date_combo['values'] = [self.get_current_date_key()]
            self.selected_date.set(self.get_current_date_key())

    def on_date_selected(self, event=None):
        self.update_inventory_display()

    def prev_day(self):
        dates = sorted(self.history.keys())
        current_idx = dates.index(self.selected_date.get()) if self.selected_date.get() in dates else -1
        if current_idx > 0:
            self.selected_date.set(dates[current_idx - 1])
            self.update_inventory_display()

    def next_day(self):
        dates = sorted(self.history.keys())
        current_idx = dates.index(self.selected_date.get()) if self.selected_date.get() in dates else -1
        if current_idx < len(dates) - 1:
            self.selected_date.set(dates[current_idx + 1])
            self.update_inventory_display()

    def change_sort(self, event):
        sort_options = {
            "–ù–∞–∑–≤–∞–Ω–∏–µ": "name_ru",
            "ID": "id",
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": "current",
            "–ò–∑–º–µ–Ω–µ–Ω–∏–µ": "change"
        }
        self.sort_column = sort_options.get(self.sort_combo.get(), "current")
        self.update_inventory_display()

    def sort_by_column(self, column):
        if self.sort_column == column:
            self.sort_reverse = not self.sort_reverse
        else:
            self.sort_column = column
            self.sort_reverse = False
        self.update_inventory_display()

    def toggle_filter(self):
        self.show_changed_only = not self.show_changed_only
        if self.show_changed_only:
            self.filter_btn.config(text="üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ")
            self.status("–ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã")
        else:
            self.filter_btn.config(text="üëÅÔ∏è –¢–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è")
            self.status("–ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã")
        self.update_inventory_display()

    def status(self, message):
        self.status_var.set(message)
        self.root.update_idletasks()

    def debug_print(self, message, data=None):
        print(f"[DEBUG] {message}")

    def load_history(self):
        try:
            if os.path.exists(HISTORY_FILE):
                with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
                    self.history = json.load(f)
                self.debug_print("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞")
            else:
                self.history = {}
                self.debug_print("–§–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            self.history = {}

    def save_history(self):
        try:
            with open(HISTORY_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.history, f, indent=2, ensure_ascii=False)
            self.debug_print("–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")

    def make_api_request(self, url):
        headers = {
            'Authorization': f'Bearer {self.token}',
            'Content-Type': 'application/json'
        }
        try:
            response = requests.get(url, headers=headers, timeout=10)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: {e}")
            return None

    def fetch_inventory(self):
        data = self.make_api_request(INVENTORY_API)
        if data is None:
            self.status("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
            return None
        
        if isinstance(data, dict) and 'response' in data:
            return data['response']
        return data

    def load_items_info(self):
        data = self.make_api_request(ITEMS_API)
        if data and isinstance(data, list):
            self.debug_print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(data)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ API")
            for item in data:
                item_id = str(item.get('Itemdefid', ''))
                if item_id:
                    self.items_info[item_id] = item
            self.status(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {len(self.items_info)} –ø—Ä–µ–¥–º–µ—Ç–∞—Ö")
        else:
            self.status("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö")

    def get_item_info(self, item_id):
        item_id_str = str(item_id)
        if item_id_str in self.items_info:
            return self.items_info[item_id_str]
        return {
            "Name": f"Unknown (ID {item_id})",
            "NameRu": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ (ID {item_id})",
            "Itemdefid": item_id
        }

    def process_inventory(self, inventory_data):
        if inventory_data is None:
            self.status("–û—à–∏–±–∫–∞: inventory_data is None")
            return None

        if not isinstance(inventory_data, list):
            self.status(f"–û—à–∏–±–∫–∞: inventory_data –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å list, –ø–æ–ª—É—á–µ–Ω {type(inventory_data)}")
            return None

        inventory = defaultdict(int)
        for item in inventory_data:
            if not isinstance(item, dict):
                print(f"–ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç: {item}")
                continue
                
            item_id = str(item.get('TypeId', ''))
            if not item_id:
                print(f"–ü—Ä–æ–ø—É—â–µ–Ω –ø—Ä–µ–¥–º–µ—Ç –±–µ–∑ TypeId: {item}")
                continue
            
            count = item.get('Count', 1)
            inventory[item_id] += count

        return dict(inventory)

    def initialize_day(self, date_key):
        if date_key not in self.history:
            self.history[date_key] = {
                "initial": self.current_inventory.copy(),
                "changes": [],
                "last_state": self.current_inventory.copy()
            }
            self.save_history()
            self.update_date_combobox()

    def initialize_first_run(self):
        self.status("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞...")
        inventory_data = self.fetch_inventory()
        
        if inventory_data is not None:
            self.current_inventory = self.process_inventory(inventory_data)
            if self.current_inventory:
                date_key = self.get_current_date_key()
                self.history[date_key] = {
                    "initial": self.current_inventory.copy(),
                    "changes": [],
                    "last_state": self.current_inventory.copy()
                }
                self.save_history()
                self.update_date_combobox()
                self.status("–ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
                self.update_inventory_display()
            else:
                self.status("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
        else:
            self.status("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.")

    def track_changes(self):
        date_key = self.get_current_date_key()
        
        if not self.current_inventory:
            self.status("–û—à–∏–±–∫–∞: current_inventory –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return

        self.initialize_day(date_key)

        last_state = self.history[date_key]["last_state"]
        changes = {}

        all_item_ids = set(last_state.keys()).union(set(self.current_inventory.keys()))
        
        for item_id in all_item_ids:
            old_count = last_state.get(item_id, 0)
            new_count = self.current_inventory.get(item_id, 0)
            
            if old_count != new_count:
                changes[item_id] = new_count - old_count

        if changes:
            change_record = {
                "timestamp": datetime.now(TIMEZONE).isoformat(),
                "changes": changes
            }
            self.history[date_key]["changes"].append(change_record)
            self.history[date_key]["last_state"] = self.current_inventory.copy()
            self.save_history()
            
            change_messages = []
            for item_id, delta in changes.items():
                item_info = self.get_item_info(item_id)
                name = item_info.get('NameRu', item_info.get('Name', f'ID {item_id}'))
                initial_count = self.history[date_key]["initial"].get(item_id, 0)
                current_count = self.current_inventory.get(item_id, 0)
                
                change_messages.append(
                    f"- {name}: {delta:+d} (–±—ã–ª–æ: {initial_count}, —Å–µ–π—á–∞—Å: {current_count})"
                )
            
            self.status(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ:\n" + "\n".join(change_messages))
            self.update_inventory_display()
        else:
            self.status("–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

    def update_inventory_display(self):
        if not self.current_inventory:
            return
            
        for item in self.tree.get_children():
            self.tree.delete(item)
            
        search_term = self.search_query.get().lower()
        date_key = self.selected_date.get()
        
        if date_key not in self.history:
            self.status(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {date_key}")
            return
            
        initial_inventory = self.history[date_key]["initial"]
        current_inventory = self.history[date_key]["last_state"]
        
        items_data = []
        for item_id, current_count in current_inventory.items():
            item_info = self.get_item_info(item_id)
            name_ru = item_info.get('NameRu', '')
            name_en = item_info.get('Name', '')
            
            if search_term and search_term not in name_ru.lower() and search_term not in name_en.lower() and search_term not in item_id.lower():
                continue
                
            initial_count = initial_inventory.get(item_id, 0)
            change = current_count - initial_count
                
            if self.show_changed_only and change == 0:
                continue
                
            items_data.append({
                "id": item_id,
                "name_ru": name_ru,
                "name_en": name_en,
                "initial": initial_count,
                "current": current_count,
                "change": change
            })
        
        reverse_sort = self.sort_reverse
        
        if self.sort_column == "change":
            if reverse_sort:
                items_data.sort(key=lambda x: (-x["change"] if x["change"] > 0 else float('inf') - x["change"]))
            else:
                items_data.sort(key=lambda x: (x["change"] if x["change"] < 0 else float('inf') + x["change"]))
        else:
            items_data.sort(key=lambda x: x[self.sort_column], reverse=reverse_sort)
        
        for idx, item in enumerate(items_data):
            values = (
                item["id"],
                item["name_ru"],
                item["name_en"],
                item["initial"],
                item["current"],
                f"{item['change']:+d}" if item["change"] != 0 else ""
            )
            
            tags = ('evenrow',) if idx % 2 == 0 else ('oddrow',)
            if item["change"] > 0:
                tags += ('positive',)
            elif item["change"] < 0:
                tags += ('negative',)
            
            try:
                self.tree.insert("", tk.END, values=values, tags=tags)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")

    def refresh_data(self):
        self.status("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        
        inventory_data = self.fetch_inventory()
        if inventory_data is not None:
            processed = self.process_inventory(inventory_data)
            if processed is not None:
                self.current_inventory = processed
                self.track_changes()
                self.status("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            else:
                self.status("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
        else:
            self.status("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
        
        self.load_items_info()
        self.update_inventory_display()

    def toggle_tracking(self):
        if self.tracking_active:
            self.stop_tracking()
        else:
            self.start_tracking()

    def start_tracking(self):
        if self.tracking_active:
            return
            
        self.tracking_active = True
        self.track_btn.config(text="‚èπÔ∏è –°—Ç–æ–ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è")
        self.status("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")
        
        self.tracking_thread = threading.Thread(target=self.tracking_loop, daemon=True)
        self.tracking_thread.start()

    def stop_tracking(self):
        self.tracking_active = False
        self.track_btn.config(text="üîç –ù–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ")
        self.status("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    def tracking_loop(self):
        while self.tracking_active:
            self.refresh_data()
            
            for _ in range(CHECK_INTERVAL):
                if not self.tracking_active:
                    break
                time.sleep(1)

    def export_data(self):
        try:
            export_file = "inventory_export_" + datetime.now().strftime("%Y%m%d_%H%M%S") + ".csv"
            with open(export_file, 'w', encoding='utf-8') as f:
                f.write("ID;–ù–∞–∑–≤–∞–Ω–∏–µ (RU);–ù–∞–∑–≤–∞–Ω–∏–µ (EN);–ù–∞—á–∞–ª–æ –¥–Ω—è;–¢–µ–∫—É—â–µ–µ;–ò–∑–º–µ–Ω–µ–Ω–∏–µ\n")
                
                for item in self.tree.get_children():
                    values = self.tree.item(item, 'values')
                    f.write(";".join(values) + "\n")
                    
            self.status(f"–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {export_file}")
            messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω", f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª:\n{export_file}")
        except Exception as e:
            self.status(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ:\n{str(e)}")

    def run(self):
        self.root.mainloop()

def load_saved_token():
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, 'r') as f:
                config = json.load(f)
                return config.get('token')
        except Exception:
            return None
    return None

def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
    saved_token = load_saved_token()
    
    if saved_token:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        auth_root = tk.Tk()
        auth_window = AuthWindow(auth_root, lambda token: None)
        if auth_window.check_token(saved_token):
            auth_root.destroy()
            # –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–Ω—ã–π, –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            root = tk.Tk()
            app = InventoryTracker(root, saved_token)
            app.run()
            return
    
    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    auth_root = tk.Tk()
    auth_window = AuthWindow(auth_root, lambda token: start_main_app(auth_root, token))
    auth_root.mainloop()

def start_main_app(auth_root, token):
    auth_root.destroy()
    root = tk.Tk()
    app = InventoryTracker(root, token)
    app.run()

if __name__ == "__main__":
    try:
        import pyperclip
    except ImportError:
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –º–æ–¥—É–ª—å pyperclip –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—É—Ñ–µ—Ä–æ–º –æ–±–º–µ–Ω–∞: pip install pyperclip")
        sys.exit(1)
    
    main()